---
import type { Translator } from "@i18n/utils";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";

interface Props {
  repo: {
    title: string;
    description: string;
    image: string;
    techs: { name: string; icon: string }[];
    repoUrls: { url: string; label?: string }[];
  };
  slug: string;
  isEven: boolean;
  t: Translator;
}

const { repo, slug, isEven, t } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/*"
);

const currentImage = images[`/src/assets/images/${repo.image}`];
if (!currentImage) {
  console.error(images);
  throw new Error(
    `"${repo.image}" does not exist in: "src/assets/images/" folder`
  );
}
---

<article class="container my-8 rounded-xl overflow-hidden bg-primary-content">
  <div
    class="grid grid-cols-1 grid-rows-3 md:grid-cols-5 md:grid-rows-1 items-center"
  >
    <header
      class="col-span-2 w-full h-full"
      class:list={isEven ? "md:order-1" : "md:order-2"}
    >
      <figure
        class="relative w-full h-full bg-base-300 overflow-hidden shadow-xl"
      >
        <Image
          src={currentImage()}
          alt={repo.title}
          class="absolute top-0 inset-0 object-cover w-full h-full"
        />
      </figure>
    </header>

    <main
      class="p-8 flex flex-col row-span-2 md:col-span-3 md:row-span-1"
      class:list={isEven
        ? "md:order-2"
        : "md:order-1 md:items-end md:text-right"}
    >
      <h3 class="text-3xl text-primary font-bold mb-4">{repo.title}</h3>
      <p class="text-lg mb-4 shrink-0">{repo.description}</p>

      <div class="flex flex-wrap gap-2 mb-6">
        {
          repo.techs.map((tech) => (
            <span class="gap-1 badge badge-soft badge-sm badge-info">
              <Icon name={tech.icon} class="w-4 h-4 py-0.5" />
              {tech.name}
            </span>
          ))
        }
      </div>

      <div
        class="w-full flex flex-col flex-wrap gap-1 md:gap-4"
        class:list={isEven ? "sm:flex-row" : "sm:flex-row-reverse"}
      >
        <a
          href=`projects/${slug.split("/").pop()}`
          class="btn btn-primary btn-sm"
        >
          {t("repoCard.view")}
        </a>
        {
          repo.repoUrls.map(({ url, label }) => (
            <a
              href={url}
              class="btn btn-outline btn-sm"
              target="_blank"
              rel="noopener noreferrer"
            >
              {t("repoCard.source", label)}
            </a>
          ))
        }
      </div>
    </main>
  </div>
</article>
